/**

\mainpage Arduino MEBM Messaging Library

MEBM stands for: <b>M</b>ouse's <b>E</b>thernet <b>B</b>ased <b>M</b>essaging, and is a super-simple protocol for sending messages between Arduinos over Ethernet based TCP/IP (i.e. Arduino devices with Ethernet shields on them, the integrated Arduino Ethernet board, Nanode and so on).

Each Arduino sends and receives MEBM Protocol messages using the Mebm object, which implements methods for constructing correctly formatted messages, sending them, and handling incoming messages.

The Mebm Protocol
-----------------

Mebm messages are fixed size structures with the following fields:

 - Mebm Magic Header (4 bytes) To help identify MEBM messages
 - MessageFrom (12 bytes) An ID of the Node which sent the message
 - MessageType (12 bytes) Some arbitrary string to identify the purpose of the message
 - MessageData (48 bytes) Arbitrary message data.

Fields are NULL padded up to their length.

A typical message might be that a magstripe has been read by a Mebm with the name "MagReader":
 - Header      = "MeBm"
 - MessageFrom = "MagReader"
 - MessageType = "ReadCard"
 - MessageData = ";1234567890ABCDEF;00000000001"

Which, once encoded would look like this if examined with hexdump:

<PRE>00000000  4d 65 42 6d 4d 61 67 52  65 61 64 65 72 00 00 00  |MeBmMagReader...|
00000010  52 65 61 64 43 61 72 64  00 00 00 00 3b 31 32 33  |ReadCard....;123|
00000020  34 35 36 37 38 39 30 41  42 43 44 45 46 3b 30 30  |4567890ABCDEF;00|
00000030  30 30 30 30 30 30 30 30  31 00 00 00 00 00 00 00  |000000001.......|
00000040  00 00 00 00 00 00 00 00  00 00 00 00              |............|
0000004c</PRE>

Mebm messages are sent over TCP/IP on port 2300.

Implementation for Arduino
--------------------------

This library implements MebmClass, which includes functionality for sending and receiving Mebm protocol messages. In the style of the Arduino Ethernet, Serial and other libraries, the Mebm library provides an instance of MebmClass named <b>Mebm</b>, which is configured using <b>Mebm.begin()</b>. See the examples provided, and MebmClass documentation for details.

Responders
----------

Handling of incoming messages is done by registering callback functions with a From and Type filter (see MebmClass::addResponder).  Incoming messages which match both filters will trigger the callback.  Filters can match either specific From / Type values or anything (using the "*" wildcard).  For example:

 - FromFilter = *
 - TypeFilter = *
 - Callback = someFunction()

In this case, the callback will be called when any message is sent to the node, because both filters match any incoming value.  A less promiscuous filter might look like this:

 - FromFilter = KitchenNode
 - TypeFilter = Temperature
 - Callback = recordKitchenTemp()

@example mebm_tut_0.ino
Tutorial number 0: Setting up the ethernet card with a statically allocated IP address.

@example mebm_tut_1.ino
Tutorial number 1: Sending messages using Mebm. 

Lets say we have an Arduino in the kitchen, and it has a thermometer sensor attached. We want to send a message over the network to a hypothetical destination we call the "receiverNode", telling it what the temperature is every few seconds.  In this example we simulate a temperature sensor with a function which returns a random value between 0 and 50 C with the function getTemperature().

@example mebm_tut_2.ino
Tutorial number 2: Receiving messages using Mebm. 

Again we are going to imagine our Arduino in a kitchen.  This time, we imagine it being hooked up to the cooker somehow, with the ability to turn it on and off by calling turnOvenOn() and turnOvenOff().  We also have some mechanism for changing the temperature of the oven by calling setOvenTemperature().

In this example we see that the data part of the message is entirely arbitrary, so long as it fits into the 48 bytes allocated.  For setting the oven temperature we expect an integer encoded as a string which we extract using atoi().

Messages to control the oven can come from anywhere on the network - for example a smartphone app which connects to the house web server.

@example mebm_tut_3.ino
Tutorial number 3: Greenhouse control system.

In this example, we imagine out Arduino sitting in a greenhouse. It has a temperature sensor which is read by calling getTemperature(), and a soil humidity sensor which is read by calling getSoilHumidity().

Outgoing messages should be sent to 192.168.1.1 as follows:
1. The temperature should be sent about once every minute in a message with the type "temp".
2. The humidity should be sent once every five minutes in a message with type "humidity".

The Arduino should also respond to the following incoming messages:
1. From: "house", Type: "Heater", Data: "On" - turns on a heater by calling turnOnHeater()
2. From: "house", Type: "Heater", Data: "Off" - turns on a heater by calling turnOffHeater()
3. From: "house", Type: "Water", Data: [integer] X - turns on sprinklers for X minutes by calling turnOnSprinklers() and then turns them off by calling turnOffSprinklers() X minutes later
4. From: "house", Type: "Status", Data: - sends a message to the house node at 192.168.1.1 containing a quick summary of the status of the heater, sprinkler, soil humidity and temperature.

In addition to these messaging requirements, the control system should automatically shut off the heater if the temperature gets higher than 25 C, and shut off the sprinkler if the soil humidity rises above 90.

*/
